apply plugin: 'com.android.application'

apply plugin: 'spoonware'
spoonware.modules = [
        'fr.spoonware.handled.HandledModule',
        'fr.spoonware.hotcatches.HotFixesModule',
        'fr.spoonware.npe.NpeModule',
//    'fr.spoonware.loop.LoopModule'
]

apply plugin: "jacoco"
jacoco.toolVersion = "0.7.1.201405082137"

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')

    // Features
    compile('com.apisense.sdk:apisense-android-sdk:1.2.0@aar') {
        transitive = true
    }
    compile('com.google.android.gms:play-services:6.5.87') {
        exclude module: 'support-v4'
    }

    // Test and monitor
    compile 'fr.spoonware:spoonware-library-android:0.0.42'
    androidTestCompile('com.jayway.android.robotium:robotium-solo:5.2.1') {
        exclude module: 'support-v4'
    }

    // Graphical
    compile('com.viewpagerindicator:library:2.4.1@aar'){
        exclude module: 'support-v4'
    }
    //// Android Lollipop support animation and views
    compile 'com.android.support:support-v4:22.2.1'
    //// Sexy android-L support
    compile('com.android.support:appcompat-v7:21.0.+') {
        exclude module: 'support-v4'
    }
    compile('com.android.support:cardview-v7:21.0.+') {
        exclude module: 'support-v4'
    }
    compile('com.android.support:recyclerview-v7:21.0.+') {
        exclude module: 'support-v4'
    }
    compile 'com.astuetz:pagerslidingtabstrip:1.0.1'
    compile('com.github.navasmdc:MaterialDesign:1.5@aar')
    compile 'com.nineoldandroids:library:2.4.0'
}

android {
    compileSdkVersion 21
    buildToolsVersion '22.0.1'

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "com.apisense.bee"
        minSdkVersion 15
        targetSdkVersion 19
        versionCode 8
        versionName "1.2.0"
    }

    signingConfigs {
        customDebug {
            storeFile file("KeystoreCertificates/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        customRelease {
            storeFile file("KeystoreCertificates/release.keystore")
            storePassword "${release_keystore_password}"
            keyAlias "bee"
            keyPassword "${release_key_password}"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.customDebug
            testCoverageEnabled = true
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.customRelease
        }
    }
}

// Unit tests
// See: https://plugins.jetbrains.com/plugin/7488?pr=idea
apply plugin: 'org.robolectric'

dependencies {
    testCompile 'junit:junit:4.10'
    testCompile 'org.robolectric:robolectric:2.3'
}

// unitTests.setRoot('src/test')
android.testOptions.unitTests.all {
    // Configure includes / excludes
    include '**/*Test.class'
    testSrcDirs = ['src/test']
    // Specify max number of processes (default is 1)
    maxParallelForks = 4

    // Specify max number of test classes to execute in a test process
    // before restarting the process (default is unlimited)
    forkEvery = 150

    // use afterTest to listen to the test execution results
    afterTest { descriptor, result ->
        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
    }
}

// Merge Unit and Instrumented test execution results into one file
task mergeTestsCoverage(type: JacocoMerge, dependsOn: ["testDebug", "connectedAndroidTest"]) {
    executionData = files('build/jacoco/testDebug.exec', 'build/outputs/code-coverage/connected/coverage.ec')
    destinationFile = file('build/jacoco/mergedResults.exec')
}

// Use previous file to generate coverage over Bee main code
task testsCoverage(type: JacocoReport, dependsOn: "mergeTestsCoverage") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        xml.destination = "${buildDir}/outputs/reports/coverage/coverageReport.xml"
        html.enabled = true
        html.destination = "${buildDir}/outputs/reports/coverage/html"
    }

    // Ignoring R usage (constants only) and external libraries
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: [
                    'android/',
                    'com/apisense/bee/R*.class',
                    'com/google/',
                    'com/viewpagerindicator',
                    'net/hockeyapp/android'

            ]
    )
    sourceDirectories = files('src/main/java', 'src/main/gen')
    executionData = files('build/jacoco/mergedResults.exec')
}
